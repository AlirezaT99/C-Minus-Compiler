Program int void ε
Declaration-list int void ε
Declaration int void
Declaration-initial int void
Declaration-prime ; [ (
Var-declaration-prime ; [
Fun-declaration-prime (
Type-specifier int void
Params int void
Param-list-void-abtar ID ε
Param-list , ε
Param int void
Param-prime [ ε
Compound-stmt {
Statement-list ID ; NUM ( { break if while return for + - ε
Statement ID ; NUM ( { break if while return for + -
Expression-stmt ID ; NUM ( break + -
Selection-stmt if
Iteration-stmt while
Return-stmt return
Return-stmt-prime ID ; NUM ( + -
For-stmt for
Vars ID
Var-zegond , ε
Var ID
Expression ID NUM ( + -
B [ ( = < == + - * ε
H = < == + - * ε
Simple-expression-zegond NUM ( + -
Simple-expression-prime ( < == + - * ε
C < == ε
Relop < ==
Additive-expression ID NUM ( + -
Additive-expression-prime ( + - * ε
Additive-expression-zegond NUM ( + -
D + - ε
Addop + -
Term ID NUM ( + -
Term-prime ( * ε
Term-zegond NUM ( + -
G * ε
Signed-factor ID NUM ( + -
Signed-factor-prime ( ε
Signed-factor-zegond NUM ( + -
Factor ID NUM (
Var-call-prime [ ( ε
Var-prime [ ε
Factor-prime ( ε
Factor-zegond NUM (
Args ID NUM ( + - ε
Arg-list ID NUM ( + -
Arg-list-prime , ε