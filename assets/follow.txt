Program $
Declaration-list ID ; NUM ( { } break if while return for + - $
Declaration ID ; NUM ( int void { } break if while return for + - $
Declaration-initial ; [ ( ) ,
Declaration-prime ID ; NUM ( int void { } break if while return for + - $
Var-declaration-prime ID ; NUM ( int void { } break if while return for + - $
Fun-declaration-prime ID ; NUM ( int void { } break if while return for + - $
Type-specifier ID
Params )
Param-list-void-abtar )
Param-list )
Param ) ,
Param-prime ) ,
Compound-stmt ID ; NUM ( int void { } break if else while return for + - $
Statement-list }
Statement ID ; NUM ( { } break if else while return for + -
Expression-stmt ID ; NUM ( { } break if else while return for + -
Selection-stmt ID ; NUM ( { } break if else while return for + -
Iteration-stmt ID ; NUM ( { } break if else while return for + -
Return-stmt ID ; NUM ( { } break if else while return for + -
Return-stmt-prime ID ; NUM ( { } break if else while return for + -
For-stmt ID ; NUM ( { } break if else while return for + -
Vars ID ; NUM ( { break if while return for + -
Var-zegond ID ; NUM ( { break if while return for + -
Var ID ; NUM ( , { break if while return for + -
Expression ; ] ) ,
B ; ] ) ,
H ; ] ) ,
Simple-expression-zegond ; ] ) ,
Simple-expression-prime ; ] ) ,
C ; ] ) ,
Relop ID NUM ( + -
Additive-expression ; ] ) ,
Additive-expression-prime ; ] ) , < ==
Additive-expression-zegond ; ] ) , < ==
D ; ] ) , < ==
Addop ID NUM ( + -
Term ; ] ) , < == + -
Term-prime ; ] ) , < == + -
Term-zegond ; ] ) , < == + -
G ; ] ) , < == + -
Signed-factor ; ] ) , < == + - *
Signed-factor-prime ; ] ) , < == + - *
Signed-factor-zegond ; ] ) , < == + - *
Factor ; ] ) , < == + - *
Var-call-prime ; ] ) , < == + - *
Var-prime ID ; NUM ] ( ) , { break if while return for < == + - *
Factor-prime ; ] ) , < == + - *
Factor-zegond ; ] ) , < == + - *
Args )
Arg-list )
Arg-list-prime )